@using System.Text.RegularExpressions
@using System.Globalization
@using MimeKit
@inject NavigationManager Navigation

<div class="col-lg-4 col-md-6 footer-newsletter">
    <h4>Подписаться на рассылку</h4>
    <p>Получайте уведомления на почту о сроках сдачи экологической отчетности</p>
    <form class="mb-2">
        <input type="email" @bind="senderEmail" @onfocus="HideErrorMessage" class="form-control @(IsEmailValid ? "" : "error-light")" placeholder="Укажите Email">

        @if (string.IsNullOrEmpty(errorMessage) && string.IsNullOrEmpty(successMessage))
        {
            @if (isSending)
            {
                <div class="loading">Соединение...</div>
            }
            else
            {
                <button type="button" @onclick="SendMessage">@ButtonText</button>
            }

        }
        else
        {
            if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
            else if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="sent-message">@successMessage</div>
            }
        }

    </form>
    <em>Заполняя форму подписки вы соглашаетесь на обработку указанных в ней персональных данных</em>


</div>

@code {
    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var idn = new IdnMapping();
        host = idn.GetUnicode(uri.Host);
    }

    private string? host;
    private string? senderName;
    private string? senderEmail;
    private string? messageSubject = "Подписка на рассылку";
    private string? messageText = "Рассылка";
    private string? errorMessage;
    private string? successMessage;
    private bool isSending;
    private bool IsEmailValid = true;
    private string ButtonText = "Подписаться";

    private async Task SendMessage()
    {
        // Проверка валидности данных
        bool isValid = ValidateData();

        if (isValid)
        {
            // Показываем сообщение о загрузке
            isSending = true;

            try
            {
                // Выполняем код в фоновом потоке
                await Task.Run(async () =>
            {
                var message = new MimeMessage();
                message.From.Add(new MailboxAddress(host ?? "Сайт", ContactDataClass.EmailTo()));
                message.To.Add(new MailboxAddress(ContactDataClass.Brand(), ContactDataClass.EmailTo()));
                message.ReplyTo.Add(new MailboxAddress(senderName, senderEmail));
                message.Subject = messageSubject;
                message.Body = new TextPart("plain") { Text = messageText + "\r\n--\r\n" + senderName + "\r\n" + senderEmail };

                using (var client = new MailKit.Net.Smtp.SmtpClient())
                {
                    // Указываем учетные данные для аутентификации
                    client.Connect(ContactDataClass.Host(), ContactDataClass.Port(), ContactDataClass.Ssl());
                    client.Authenticate(ContactDataClass.UserName(), ContactDataClass.Password());

                    // Отправляем сообщение
                    await client.SendAsync(message); // Используем асинхронный метод для отправки
                    client.Disconnect(true);
                }

                // Очистить все поля
                senderEmail = "";

            });

                // Показать сообщение об успешной отправке
                successMessage = "Вы подписаны";
                StateHasChanged(); // Обновление интерфейса
                // Задержка перед скрытием сообщения об успешной отправке
                // Task.Delay(3000).Wait();

                // Скрыть сообщение об успешной отправке
                // successMessage = "";

            }
            catch (Exception ex)
            {
                // В случае ошибки, отобразить сообщение об ошибке
                errorMessage = "Ошибка, попробуйте еще";

                // Очистить сообщение об ошибке через 3 секунды
                // await Task.Delay(3000);
                Task.Delay(3000).Wait();
                HideErrorMessage();

                // Вывести информацию об ошибке в консоль для отладки
                // Console.WriteLine($"Ошибка при отправке сообщения: {ex.Message}");
            }
            finally
            {
                // Показать кнопку снова после завершения отправки
                isSending = false;
            }

        }
    }

    private bool ValidateData()
    {
        // Проверка на заполненность полей
        if (string.IsNullOrWhiteSpace(senderEmail))
        {
            errorMessage = "Укажите e-mail";
            return false;
        }

        // Проверка корректности email адреса
        if (!ValidationHelper.IsValidEmail(senderEmail))
        {
            errorMessage = "Укажите корректный e-mail";
            return IsEmailValid = false;
        }

        // Все проверки пройдены успешно
        HideErrorMessage(); // Очищаем сообщение об ошибке
        return true;
    }

    private void HideErrorMessage()
    {
        errorMessage = "";
        IsEmailValid = true;
    }

    //  Генерирование идентификатора в формате времени
    private string MessageIdentiti()
    {
        DateTime now = DateTime.Now;
        // Форматируем дату и время в требуемом формате
        string requestId = $"Подписка от {now:dd.MM.yyг. HH:mm:ss}";
        return requestId;
    }

}